// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wEZN3Y2o4rzJQDQC8iKijz
// Component: PXCO4NivmC
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: j9EbzKQ8QuL/component
import "@plasmicapp/react-web/lib/plasmic.css";
import sty from "./PlasmicButtonDownloadResume.module.css"; // plasmic-import: PXCO4NivmC/css

export const PlasmicButtonDownloadResume__VariantProps = new Array();

export const PlasmicButtonDownloadResume__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    await promise;
  });

function PlasmicButtonDownloadResume__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <Button
      data-plasmic-name={"downloadResumeButton"}
      data-plasmic-override={overrides.downloadResumeButton}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.downloadResumeButton)}
      color={"blue"}
      link={"#"}
    >
      {"Download Resume"}
    </Button>
  );
}

const PlasmicDescendants = {
  downloadResumeButton: ["downloadResumeButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicButtonDownloadResume__ArgProps,
          internalVariantPropNames: PlasmicButtonDownloadResume__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicButtonDownloadResume__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "downloadResumeButton") {
    func.displayName = "PlasmicButtonDownloadResume";
  } else {
    func.displayName = `PlasmicButtonDownloadResume.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonDownloadResume = Object.assign(
  // Top-level PlasmicButtonDownloadResume renders the root element
  makeNodeComponent("downloadResumeButton"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicButtonDownloadResume
    internalVariantProps: PlasmicButtonDownloadResume__VariantProps,
    internalArgProps: PlasmicButtonDownloadResume__ArgProps
  }
);

export default PlasmicButtonDownloadResume;
/* prettier-ignore-end */
